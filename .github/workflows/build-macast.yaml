# Copyright (c) 2021 by xfangfang. All Rights Reserved.


name: Build Macast

on:
  push:
    branches:
      - dev_test
      - morelog
  pull_request:
  workflow_dispatch:
    inputs:
      ssh_darwin:
        description: 'SSH connection to Darwin'
        required: false
        default: 'false'
      ssh_ubuntu:
        description: 'SSH connection to Ubuntu'
        required: false
        default: 'false'
      release:
        description: 'Push a new release'
        required: false
        default: 'false'

jobs:
  release:
    needs: [ build-nt, build-darwin, build-amd64, build-armv7, build-nt32 ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2

      - name: Version
        run: |
          ls -R
          export VERSION=`python3 -c "exec(open('macast/__pkginfo__.py').read()); print(__version__)"`
          export VERSION_NUM=`python3 -c "exec(open('macast/__pkginfo__.py').read()); print(__version_num__)"`
          echo "VERSION=v$VERSION" >> $GITHUB_ENV
          echo "VERSION_NUM=v$VERSION_NUM" >> $GITHUB_ENV
          echo "DIST_DMG=Macast-MacOS-v${VERSION}-x86.dmg" >> $GITHUB_ENV
          echo "DIST_DMG_ARM=Macast-MacOS-v${VERSION}-arm.dmg" >> $GITHUB_ENV
          echo "DIST_EXE=Macast-Windows-v${VERSION}.exe" >> $GITHUB_ENV
          echo "DIST_EXE_DEBUG=Macast-Windows-v${VERSION}-debug.exe" >> $GITHUB_ENV
          echo "DIST_EXE32=Macast-Windows-v${VERSION}-x86.exe" >> $GITHUB_ENV
          echo "DIST_EXE32_DEBUG=Macast-Windows-v${VERSION}-x86-debug.exe" >> $GITHUB_ENV
          echo "DIST_AMD64=Macast-Linux-v${VERSION}-amd64" >> $GITHUB_ENV
          echo "DIST_AMD64_DEB=Macast-Linux-v${VERSION}-amd64.deb" >> $GITHUB_ENV
          echo "DIST_ARMV7=Macast-Linux-v${VERSION}-armv7" >> $GITHUB_ENV
          echo "DIST_ARMV7_DEB=Macast-Linux-v${VERSION}-armv7.deb" >> $GITHUB_ENV
          echo $GITHUB_ENV

      - name: Upload
        if: github.event.inputs.release == 'true' && github.event.inputs.release  != 'false' && !cancelled()
        uses: ncipollo/release-action@v1
        with:
          name: Macast ${{ env.VERSION }}
          tag: ${{ env.VERSION_NUM }}
          omitBodyDuringUpdate: true
          body: This release is built by github-action.
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          artifacts: >
            ${{ env.DIST_DMG }}/${{ env.DIST_DMG }},
            ${{ env.DIST_DMG_ARM }}/${{ env.DIST_DMG_ARM }},
            ${{ env.DIST_EXE }}/${{ env.DIST_EXE }},
            ${{ env.DIST_EXE_DEBUG }}/${{ env.DIST_EXE_DEBUG }},
            ${{ env.DIST_EXE32 }}/${{ env.DIST_EXE32 }},
            ${{ env.DIST_EXE32_DEBUG }}/${{ env.DIST_EXE32_DEBUG }},
            ${{ env.DIST_AMD64 }}/${{ env.DIST_AMD64 }},
            ${{ env.DIST_AMD64_DEB }}/${{ env.DIST_AMD64_DEB }},
            ${{ env.DIST_ARMV7 }}/${{ env.DIST_ARMV7 }},
            ${{ env.DIST_ARMV7_DEB }}/${{ env.DIST_ARMV7_DEB }}

  build-amd64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh_ubuntu == 'true' && github.event.inputs.ssh_ubuntu  != 'false') || contains(github.event.action, 'ssh_ubuntu')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Build
        id: compile
        run: |
          export VERSION=`python3 -c "exec(open('macast/__pkginfo__.py').read()); print(__version__)"`
          export VERSION_NUM=`python3 -c "exec(open('macast/__pkginfo__.py').read()); print(__version_num__)"`
          export DIST_AMD64_DEB=Macast-Linux-v${VERSION}-amd64.deb
          export DIST_AMD64=Macast-Linux-v${VERSION}-amd64
          echo "DIST_AMD64_DEB=${DIST_AMD64_DEB}" >> $GITHUB_ENV
          echo "DIST_AMD64=${DIST_AMD64}" >> $GITHUB_ENV
          echo "VERSION=v$VERSION" >> $GITHUB_ENV
          docker run --rm -v "$(pwd):/src/" xfangfang/build-macast:amd64-220223 \
              'pip install -r requirements.txt && \
              pip install -U pyinstaller && \
              python setup.py compile_catalog -f -D macast -d macast/i18n && \
              export BUILD_LANG=$(for i in $(ls macast/i18n);do echo --add-data=macast/i18n/$i/LC_MESSAGES/*.mo:macast/i18n/$i/LC_MESSAGES; done) &&\
              echo $BUILD_LANG
              export BUILD_ASSETS=$(for i in $(ls macast/assets);do [ -d macast/assets/$i ] && echo --add-data=macast/assets/$i/*:macast/assets/$i; done) &&\
              echo $BUILD_ASSETS &&\
              pyinstaller --noconfirm -F -w \
                --additional-hooks-dir=. \
                $BUILD_LANG \
                $BUILD_ASSETS \
                --add-data="macast/xml/*:macast/xml" \
                --add-data="macast/assets/*.png:macast/assets" \
                --exclude-module=tkinter \
                --distpath="app" \
              Macast.py'
          sudo chown 1000 app/Macast
          cp app/Macast $DIST_AMD64
          #build deb
          mkdir -p dist/DEBIAN
          mkdir -p dist/usr/bin
          mkdir -p dist/usr/share/applications
          mkdir -p dist/usr/share/icons/hicolor/128x128/apps
          echo -e "Package: cn.xfangfang.macast\nVersion: ${VERSION_NUM}\nStandards-Version: ${VERSION}\nArchitecture: amd64\nMaintainer: xfangfang <xfangfang@126.com>\nSection:video\nDescription: DLNA Media Renderer\nDepends: mpv" > dist/DEBIAN/control
          echo -e "[Desktop Entry]\nName=Macast\nComment=DLNA Media Renderer\nTryExec=mpv\nExec=/usr/bin/macast\nIcon=/usr/share/icons/hicolor/128x128/apps/macast.png\nTerminal=false\nType=Application\nCategories=AudioVideo;Audio;Video;Player;TV;" > dist/usr/share/applications/macast.desktop
          cp app/Macast dist/usr/bin/macast
          cp macast/assets/icon.png dist/usr/share/icons/hicolor/128x128/apps/macast.png
          dpkg -b dist $DIST_AMD64_DEB
          echo "::set-output name=status::success"

      - name: Upload dist linux x64
        uses: actions/upload-artifact@v2
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ env.DIST_AMD64 }}
          path: ${{ env.DIST_AMD64 }}

      - name: Upload dist deb
        uses: actions/upload-artifact@v2
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ env.DIST_AMD64_DEB }}
          path: ${{ env.DIST_AMD64_DEB }}

  build-nt:
    runs-on: windows-2019
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Requirement
        run: |
          choco install upx
          pip3 install -r requirements.txt
          pip3 install pyinstaller
          $client = new-object System.Net.WebClient
          $client.DownloadFile('https://github.com/xfangfang/Macast/releases/download/v0.1/mpv-0.34.0-x86_64.7z','mpv.7z')
          7z x -obin mpv.7z *.exe

      - name: Build
        id: compile
        run: |
          python3 setup.py compile_catalog -f -D macast -d macast\i18n
          $VERSION=python3 -c "exec(open('macast\__pkginfo__.py').read()); print(__version__)"
          echo "DIST_EXE=Macast-Windows-v${VERSION}.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "DIST_EXE_DEBUG=Macast-Windows-v${VERSION}-debug.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "VERSION=v${VERSION}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $BUILD_LANG=(ls macast\i18n | ForEach-Object {echo --add-data="macast\i18n\$($_.Name)\LC_MESSAGES\*.mo;macast\i18n\$($_.Name)\LC_MESSAGES"})
          $BUILD_ASSETS_1=(ls macast\assets | ?{$_.PsIsContainer -eq $true} | ForEach-Object {echo --add-data="macast\assets\$($_.Name)\*;macast\assets\$($_.Name)"})
          $BUILD_ASSETS_2=("--add-data=macast\assets\*;macast\assets","--add-data=macast\xml\*;macast\xml","--add-binary=bin\mpv.exe;bin")
          $BUILD_HIDDEN_IMPORT=("--hidden-import=win32process","--hidden-import=win32gui")
          $BUILD_OTHERS=("--additional-hooks-dir=.","--icon=macast\assets\icon.ico","--runtime-tmpdir=%Temp%\Macast", "--upx-exclude=mpv.exe")
          $BUILD_COMMON=($BUILD_LANG+$BUILD_ASSETS_1+$BUILD_ASSETS_2+$BUILD_HIDDEN_IMPORT+$BUILD_OTHERS)
          pyinstaller --noconfirm -F -w  $BUILD_COMMON --splash=macast\assets\macast_splash.jpg Macast.py
          cp dist\Macast.exe Macast-Windows-v${VERSION}.exe
          pyinstaller --noconfirm -F -d=all $BUILD_COMMON Macast.py
          cp dist\Macast.exe Macast-Windows-v${VERSION}-debug.exe
          echo "::set-output name=status::success"

      - name: Upload dist
        uses: actions/upload-artifact@v2
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ env.DIST_EXE }}
          path: ${{ env.DIST_EXE }}

      - name: Upload dist debug
        uses: actions/upload-artifact@v2
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ env.DIST_EXE_DEBUG }}
          path: ${{ env.DIST_EXE_DEBUG }}

  build-darwin:
    runs-on: macos-11
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: install create-dmg
        run: brew install create-dmg

      - name: install universal python
        run: |
          wget https://www.python.org/ftp/python/3.9.8/python-3.9.8-macos11.pkg
          sudo installer -pkg python-3.9.8-macos11.pkg -target /

      - name: Install Requirement
        run: |
          pip3 install -r requirements.txt
          pip3 install py2app
          wget https://laboratory.stolendata.net/~djinn/mpv_osx/mpv-latest.tar.gz
          mkdir -p bin && tar --strip-components 2 -C bin -xzvf mpv-latest.tar.gz mpv.app/Contents/MacOS
          wget https://github.com/xfangfang/Macast/releases/download/v0.1/mpv-0.34.1-darwin-arm.tar.gz
          mkdir -p bin_arm && tar --strip-components 2 -C bin_arm -xzvf mpv-0.34.1-darwin-arm.tar.gz mpv.app/Contents/MacOS

      - name: Readme
        run: |
          mkdir -p dist
          echo "Macast" > dist/readme.txt
          echo "" >> dist/readme.txt
          echo "if you see any of these after open this application:" >> dist/readme.txt
          echo "1: Macast.app is damaged and can't be opened. You should move it to he Trash." >> dist/readme.txt
          echo "2: Macast.app can't be opened because it is from an unidentified developer." >> dist/readme.txt
          echo "" >> dist/readme.txt
          echo "Please run this command in your terminal:" >> dist/readme.txt
          echo "sudo xattr -rd com.apple.quarantine /Applications/Macast.app" >> dist/readme.txt

      - name: Build
        id: compile
        run: |
          python3 setup.py compile_catalog -f -D macast -d macast/i18n
          python3 setup_py2app.py py2app --arch=x86_64
          cp -R bin dist/Macast.app/Contents/Resources/
          export VERSION=`python3 -c "exec(open('macast/__pkginfo__.py').read()); print(__version__)"`
          echo "DIST_DMG=Macast-MacOS-v${VERSION}-x86.dmg" >> $GITHUB_ENV
          echo "VERSION=v$VERSION" >> $GITHUB_ENV
          create-dmg --window-pos 200 120 --window-size 800 400 --icon-size 100 --icon "Macast.app" 200 190  --icon "readme.txt" 400 100 --hide-extension "Macast.app" --app-drop-link 600 190  --volname "Macast-v${VERSION} Installer" Macast-MacOS-v${VERSION}-x86.dmg "dist/"
          echo "::set-output name=status::success"

      - name: Build arm
        id: compile
        run: |
          rm -rf dist/Macast.app
          python3 setup_py2app.py py2app --arch=universal2
          cp -R bin_arm dist/Macast.app/Contents/Resources/
          export VERSION=`python3 -c "exec(open('macast/__pkginfo__.py').read()); print(__version__)"`
          echo "DIST_DMG_ARM=Macast-MacOS-v${VERSION}-arm.dmg" >> $GITHUB_ENV
          echo "VERSION=v$VERSION" >> $GITHUB_ENV
          create-dmg --window-pos 200 120 --window-size 800 400 --icon-size 100 --icon "Macast.app" 200 190  --icon "readme.txt" 400 100 --hide-extension "Macast.app" --app-drop-link 600 190  --volname "Macast-v${VERSION} Installer" Macast-MacOS-v${VERSION}-arm.dmg "dist/"
          echo "::set-output name=status::success"

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh_darwin == 'true' && github.event.inputs.ssh_darwin  != 'false') || contains(github.event.action, 'ssh_darwin')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Upload dist
        uses: actions/upload-artifact@v2
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ env.DIST_DMG }}
          path: ${{ env.DIST_DMG }}

      - name: Upload dist arm
        uses: actions/upload-artifact@v2
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ env.DIST_DMG_ARM }}
          path: ${{ env.DIST_DMG_ARM }}

  build-armv7:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build
        id: compile
        run: |
          export VERSION=`python3 -c "exec(open('macast/__pkginfo__.py').read()); print(__version__)"`
          export VERSION_NUM=`python3 -c "exec(open('macast/__pkginfo__.py').read()); print(__version_num__)"`
          export BUILD_PLATFORM=armv7
          export DIST_DEB=Macast-Linux-v${VERSION}-${BUILD_PLATFORM}.deb
          export DIST=Macast-Linux-v${VERSION}-${BUILD_PLATFORM}
          echo "DIST_DEB=${DIST_DEB}" >> $GITHUB_ENV
          echo "DIST=${DIST}" >> $GITHUB_ENV
          echo "VERSION=v$VERSION" >> $GITHUB_ENV
          docker run --platform=linux/arm/v7 --rm -v "$(pwd):/src/" xfangfang/build-macast:armv7-220223 \
              'python setup.py compile_catalog -f -D macast -d macast/i18n && \
              export BUILD_LANG=$(for i in $(ls macast/i18n);do echo --add-data=macast/i18n/$i/LC_MESSAGES/*.mo:macast/i18n/$i/LC_MESSAGES; done) &&\
              echo $BUILD_LANG
              export BUILD_ASSETS=$(for i in $(ls macast/assets);do [ -d macast/assets/$i ] && echo --add-data=macast/assets/$i/*:macast/assets/$i; done) &&\
              echo $BUILD_ASSETS && \
              pyinstaller --noconfirm -F -w \
                --additional-hooks-dir=. \
                $BUILD_LANG \
                $BUILD_ASSETS \
                --add-data="macast/xml/*:macast/xml" \
                --add-data="macast/assets/*.png:macast/assets" \
                --exclude-module=tkinter \
                --distpath="app" \
              Macast.py'
          sudo chown 1000 app/Macast
          cp app/Macast $DIST
          #build deb
          mkdir -p dist/DEBIAN
          mkdir -p dist/usr/bin
          mkdir -p dist/usr/share/applications
          mkdir -p dist/usr/share/icons/hicolor/128x128/apps
          echo -e "Package: Macast\nVersion: ${VERSION_NUM}\nStandards-Version: ${VERSION}\nArchitecture: armhf\nMaintainer: xfangfang <xfangfang@126.com>\nDescription: DLNA Media Renderer\nDepends: mpv" > dist/DEBIAN/control
          echo -e "[Desktop Entry]\nName=Macast\nComment=DLNA Media Renderer\nTryExec=mpv\nExec=/usr/bin/macast\nIcon=/usr/share/icons/hicolor/128x128/apps/macast.png\nTerminal=false\nType=Application\nCategories=AudioVideo;Audio;Video;Player;TV;" > dist/usr/share/applications/macast.desktop
          cp app/Macast dist/usr/bin/macast
          cp macast/assets/icon.png dist/usr/share/icons/hicolor/128x128/apps/macast.png
          dpkg -b dist $DIST_DEB
          echo "::set-output name=status::success"

      - name: Upload dist linux
        uses: actions/upload-artifact@v2
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ env.DIST }}
          path: ${{ env.DIST }}

      - name: Upload dist deb
        uses: actions/upload-artifact@v2
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ env.DIST_DEB }}
          path: ${{ env.DIST_DEB }}

  build-nt32:
    runs-on: windows-2019
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.7.9'
          architecture: 'x86'

      - name: Install Requirement
        run: |
          choco install upx
          pip3 install -r requirements.txt
          pip3 install pyinstaller
          $client = new-object System.Net.WebClient
          $client.DownloadFile('https://github.com/xfangfang/Macast/releases/download/v0.1/mpv-0.34.0-i686.7z','mpv.7z')
          7z x -obin mpv.7z *.exe

      - name: Build
        id: compile
        run: |
          python3 setup.py compile_catalog -f -D macast -d macast\i18n
          $VERSION=python3 -c "exec(open('macast\__pkginfo__.py').read()); print(__version__)"
          echo "DIST_EXE=Macast-Windows-v${VERSION}-x86.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "DIST_EXE_DEBUG=Macast-Windows-v${VERSION}-x86-debug.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "VERSION=v${VERSION}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $BUILD_LANG=(ls macast\i18n | ForEach-Object {echo --add-data="macast\i18n\$($_.Name)\LC_MESSAGES\*.mo;macast\i18n\$($_.Name)\LC_MESSAGES"})
          $BUILD_ASSETS_1=(ls macast\assets | ?{$_.PsIsContainer -eq $true} | ForEach-Object {echo --add-data="macast\assets\$($_.Name)\*;macast\assets\$($_.Name)"})
          $BUILD_ASSETS_2=("--add-data=macast\assets\*;macast\assets","--add-data=macast\xml\*;macast\xml","--add-binary=bin\mpv.exe;bin")
          $BUILD_HIDDEN_IMPORT=("--hidden-import=win32process","--hidden-import=win32gui")
          $BUILD_OTHERS=("--additional-hooks-dir=.","--icon=macast\assets\icon.ico","--runtime-tmpdir=%Temp%\Macast", "--upx-exclude=mpv.exe")
          $BUILD_COMMON=($BUILD_LANG+$BUILD_ASSETS_1+$BUILD_ASSETS_2+$BUILD_HIDDEN_IMPORT+$BUILD_OTHERS)
          pyinstaller --noconfirm -F -w  $BUILD_COMMON --splash=macast\assets\macast_splash.jpg Macast.py
          cp dist\Macast.exe Macast-Windows-v${VERSION}-x86.exe
          pyinstaller --noconfirm -F -d=all $BUILD_COMMON Macast.py
          cp dist\Macast.exe Macast-Windows-v${VERSION}-x86-debug.exe
          echo "::set-output name=status::success"

      - name: Upload dist
        uses: actions/upload-artifact@v2
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ env.DIST_EXE }}
          path: ${{ env.DIST_EXE }}

      - name: Upload dist debug
        uses: actions/upload-artifact@v2
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ env.DIST_EXE_DEBUG }}
          path: ${{ env.DIST_EXE_DEBUG }}
